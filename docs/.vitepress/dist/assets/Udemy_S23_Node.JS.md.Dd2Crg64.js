import{_ as e,c as s,o as t,a2 as a}from"./chunks/framework.Butr-cWb.js";const i="/webdev.notes/assets/image-35.Bsn-UfEu.png",o="/webdev.notes/assets/image-36.C829BPgS.png",n="/webdev.notes/assets/image-37.CXWSWtZd.png",l="/webdev.notes/assets/image-38.CXuyEvC3.png",r="/webdev.notes/assets/image-39.CKZHLNpE.png",h="/webdev.notes/assets/image-40.D30gaMTb.png",p="/webdev.notes/assets/image-43.ghHeY0P7.png",d="/webdev.notes/assets/image-42.LP7-1xMP.png",c="/webdev.notes/assets/image-98.PtFLzsWZ.png",k="/webdev.notes/assets/image-99.RK06facl.png",g="/webdev.notes/assets/image-100.C-yxmOCX.png",u="/webdev.notes/assets/image-101.Yo4VsQyR.png",m="/webdev.notes/assets/image-102.R8StOAi1.png",E="/webdev.notes/assets/image-103.BIOHX8s-.png",P=JSON.parse('{"title":"Node.JS","description":"","frontmatter":{},"headers":[],"relativePath":"Udemy/S23_Node.JS.md","filePath":"Udemy/S23_Node.JS.md"}'),y={name:"Udemy/S23_Node.JS.md"},b=a('<h1 id="node-js" tabindex="-1">Node.JS <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.JS&quot;">​</a></h1><p><img src="'+i+'" alt="Node.js"></p><ul><li>Why use frameworks anyways ?</li><li>We can use a lot of prewritten code(framework code)</li></ul><h2 id="_193-what-is-node-js" tabindex="-1">193. What is Node.JS <a class="header-anchor" href="#_193-what-is-node-js" aria-label="Permalink to &quot;193. What is Node.JS&quot;">​</a></h2><p><img src="'+o+'" alt="Alt text"></p><blockquote><p>Asynchronous event-driven</p></blockquote><ul><li>JS code doesnt have to do from beginning to end</li><li>it ties up resources</li><li></li><li>We can parcel up bits of code into events and code triggers only when the code is triggered does the event run</li></ul><hr><p><img src="'+n+'" alt="Alt text"></p><h3 id="provides-runtime-to-machines" tabindex="-1">- Provides runtime to machines <a class="header-anchor" href="#provides-runtime-to-machines" aria-label="Permalink to &quot;- Provides runtime to machines&quot;">​</a></h3><p><img src="'+l+'" alt="Alt text"></p><h3 id="the-code-doesnt-have-to-run-everything-sequentially" tabindex="-1">- the code doesnt have to run everything sequentially <a class="header-anchor" href="#the-code-doesnt-have-to-run-everything-sequentially" aria-label="Permalink to &quot;- the code doesnt have to run everything sequentially&quot;">​</a></h3><hr><p><img src="'+r+'" alt="why node"><br><img src="'+h+'" alt="onering"></p><p><img src="'+p+'" alt="why"></p><h2 id="node-js-webapps" tabindex="-1">Node JS webapps: <a class="header-anchor" href="#node-js-webapps" aria-label="Permalink to &quot;Node JS webapps:&quot;">​</a></h2><p><img src="'+d+'" alt="Alt text"></p><h2 id="_196-using-node-js" tabindex="-1">196. Using Node.js <a class="header-anchor" href="#_196-using-node-js" aria-label="Permalink to &quot;196. Using Node.js&quot;">​</a></h2><h3 id="node-repl-read-eval-print-loop" tabindex="-1">NODE REPL : Read Eval Print Loop <a class="header-anchor" href="#node-repl-read-eval-print-loop" aria-label="Permalink to &quot;NODE REPL : Read Eval Print Loop&quot;">​</a></h3><p>type:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span></span></code></pre></div><h1 id="cheat-sheet-link" tabindex="-1"><a href="https://www.codecademy.com/learn/learn-node-js/modules/intro-to-node-js/cheatsheet" target="_blank" rel="noreferrer">Cheat Sheet Link</a> <a class="header-anchor" href="#cheat-sheet-link" aria-label="Permalink to &quot;[Cheat Sheet Link](https://www.codecademy.com/learn/learn-node-js/modules/intro-to-node-js/cheatsheet)&quot;">​</a></h1><p>Running a JS file out of a browser in a terminal :</p><p><img src="'+c+'" alt="Alt text"></p><h2 id="_197-how-to-use-the-native-node-modules" tabindex="-1">197. How to Use the Native Node Modules <a class="header-anchor" href="#_197-how-to-use-the-native-node-modules" aria-label="Permalink to &quot;197. How to Use the Native Node Modules&quot;">​</a></h2><ul><li>What are <strong>node modules</strong> - A starting toolset to make it easier to build webapps</li></ul><h3 id="file-system-native-module" tabindex="-1">File system native module <a class="header-anchor" href="#file-system-native-module" aria-label="Permalink to &quot;File system native module&quot;">​</a></h3><p><code>node:fs</code></p><h3 id="documentation-of-node-fs" tabindex="-1"><a href="https://nodejs.org/api/fs.html#file-system" target="_blank" rel="noreferrer">Documentation Of</a> <code>$node:fs</code> <a class="header-anchor" href="#documentation-of-node-fs" aria-label="Permalink to &quot;[Documentation Of](https://nodejs.org/api/fs.html#file-system) ```$node:fs```&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Node JS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The file has been saved!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><details><summary>Chatgpt explaination:</summary><p>Certainly! This code is a simple example of using the <code>fs</code> module in Node.js to write data to a file asynchronously. Let&#39;s break down each part of the code:</p><ol><li><p><strong>Require the <code>fs</code> module:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>In Node.js, the <code>fs</code> (file system) module provides functionality for interacting with the file system. Here, it is being imported using the <code>require</code> statement.</p></li><li><p><strong>Use <code>writeFile</code> method to write data to a file:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Node JS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span></code></pre></div><p>The <code>writeFile</code> method is used to asynchronously write data to a file. It takes three parameters:</p><ul><li><code>&quot;message.txt&quot;</code>: The name of the file to be written to.</li><li><code>&quot;Hello Node JS&quot;</code>: The data to be written to the file.</li><li><code>(err) =&gt; { /* callback function */ }</code>: A callback function that will be called once the writing operation is complete. If an error occurs during the write operation, it will be passed to this callback as the <code>err</code> parameter.</li></ul></li><li><p><strong>Handle errors:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span></code></pre></div><p>This line checks if an error occurred during the file write operation. If an error is present, it is thrown, which typically terminates the program and prints an error message.</p></li><li><p><strong>Print success message:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The file has been saved!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If there is no error during the write operation, this line prints a success message to the console.</p></li></ol><p>In summary, this code writes the string &quot;Hello Node JS&quot; to a file named &quot;message.txt&quot; asynchronously. It checks for errors during the write operation and prints a success message if the operation is successful. Note that the use of the callback function ensures that the code is non-blocking, allowing other operations to continue while the file write is in progress.</p></details><p><img src="'+k+'" alt="Alt text"></p><p><img src="'+g+'" alt="Alt text"></p><h2 id="_198-the-npm-package-manager-and-installing-external-node-modules" tabindex="-1">198. The NPM Package Manager and Installing External Node Modules <a class="header-anchor" href="#_198-the-npm-package-manager-and-installing-external-node-modules" aria-label="Permalink to &quot;198. The NPM Package Manager and Installing External Node Modules&quot;">​</a></h2><p>NPM is the open source library to find tools /code.</p><ul><li>Nmp comes prebundled with node</li></ul><p><img src="'+u+'" alt="Alt text"></p><p>How to install a package and use it ? ;aonf;san</p><h3 id="to-use-the-the-import-xxx-from-aav-thingy" tabindex="-1">To use the the <code>import xxx from &quot;aav&quot; </code>-thingy : <a class="header-anchor" href="#to-use-the-the-import-xxx-from-aav-thingy" aria-label="Permalink to &quot;To use the the ```import xxx from &quot;aav&quot; ```-thingy :&quot;">​</a></h3><h3 id="add-type-module" tabindex="-1">Add <code>&quot;type&quot; = &quot;module&quot; </code> <a class="header-anchor" href="#add-type-module" aria-label="Permalink to &quot;Add ```&quot;type&quot; = &quot;module&quot; ```&quot;">​</a></h3><p><img src="'+m+'" alt="Alt text"></p><p><img src="'+E+'" alt="Alt text"></p><p>JSON : Javascript Object Notation</p><h2 id="_199-project-qr-code-generator" tabindex="-1">199. [Project] QR Code Generator <a class="header-anchor" href="#_199-project-qr-code-generator" aria-label="Permalink to &quot;199. [Project] QR Code Generator&quot;">​</a></h2><h2 id="_200-tip-from-angela-step-up-to-the-challenge" tabindex="-1">200. Tip from Angela - Step Up to the Challenge <a class="header-anchor" href="#_200-tip-from-angela-step-up-to-the-challenge" aria-label="Permalink to &quot;200. Tip from Angela - Step Up to the Challenge&quot;">​</a></h2>',45),f=[b];function v(q,_,w,F,x,C){return t(),s("div",null,f)}const j=e(y,[["render",v]]);export{P as __pageData,j as default};
